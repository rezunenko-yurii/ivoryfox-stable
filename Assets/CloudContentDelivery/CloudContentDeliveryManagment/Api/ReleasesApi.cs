/* 
 * Content Delivery Management API
 *
 * <p>Cloud Content Delivery is a managed cloud service that hosts and delivers content to end users worldwide.</p> <p>You are currently viewing the documentation for the <b>Management API</b>, intended to be used by developers at build time for managing content. Refer to the <a href=\"https://content-api.cloud.unity3d.com/doc_client/\">Content Delivery Client API</a> for documentation about the API intended to be used at runtime by your game client.</p> <h2>Client SDK</h2> <p>The Content Delivery Management API is based on Swagger. The <a href=\"https://swagger.io/tools/swagger-codegen/\">Swagger Code Generator</a> can generate client libraries to integrate with your projects.</p> <p>A <a href=\"https://content-api.cloud.unity3d.com/doc/doc.json\">JSON schema</a> is required to generate a client for this API version.</p> <h2>Authentication</h2> <p>The Content Delivery Management API requires an API key associated with your Unity developer account. To access your API Key, please visit the <a href=\"https://developer.cloud.unity3d.com\">developer dashboard</a>.</p> <p>To authenticate requests, include a Basic Authentication header as a base64-encoded string 'username:password', using your API key as the password (and empty username).</p> <p>For example, an API key value of 'd6d2c026bac44b1ea7ac0332694a830e' would include an Authorization header like:</p> <p><b>Authorization: Basic OmQ2ZDJjMDI2YmFjNDRiMWVhN2FjMDMzMjY5NGE4MzBl</b></p> <h2>Pagination</h2> <p>Paged results take two parameters: the number of results to return per page (?per_page) and the page number based on that per page amount (?page). Page numbering starts with 1 and the default page size is 10.</p> <p>For instance, if there are 40 results and you specify page=2&per_page=10, you will receive records 11-20. Paged results will also return a Content-Range header. In the example above the content range header will look like this:</p> <p><b>Content-Range: items 11-20/40</b></p>
 *
 * OpenAPI spec version: 0.9.112
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CloudContentDeliveryManagment.Client;
using CloudContentDeliveryManagment.Model;

namespace CloudContentDeliveryManagment.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReleasesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create release
        /// </summary>
        /// <remarks>
        /// Creates a new release for a given bucket. If you don&#39;t specify the snapshot or entries fields all entries currently in the bucket will be added to the release. Otherwise you can use the snapshot field to create a release with all entries prior to a given date, or the entries field to provide a list of entryids and versionids to add.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="release">Release</param>
        /// <returns>Release</returns>
        Release CreateRelease (string bucketid, ReleaseCreate release);

        /// <summary>
        /// Create release
        /// </summary>
        /// <remarks>
        /// Creates a new release for a given bucket. If you don&#39;t specify the snapshot or entries fields all entries currently in the bucket will be added to the release. Otherwise you can use the snapshot field to create a release with all entries prior to a given date, or the entries field to provide a list of entryids and versionids to add.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="release">Release</param>
        /// <returns>ApiResponse of Release</returns>
        ApiResponse<Release> CreateReleaseWithHttpInfo (string bucketid, ReleaseCreate release);
        /// <summary>
        /// Get release
        /// </summary>
        /// <remarks>
        /// Gets a single release for a given bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <returns>Release</returns>
        Release GetRelease (string bucketid, string releaseid);

        /// <summary>
        /// Get release
        /// </summary>
        /// <remarks>
        /// Gets a single release for a given bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <returns>ApiResponse of Release</returns>
        ApiResponse<Release> GetReleaseWithHttpInfo (string bucketid, string releaseid);
        /// <summary>
        /// Get release by badge
        /// </summary>
        /// <remarks>
        /// Gets a badged release for a given bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>Release</returns>
        Release GetReleaseByBadge (string bucketid, string badgename);

        /// <summary>
        /// Get release by badge
        /// </summary>
        /// <remarks>
        /// Gets a badged release for a given bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>ApiResponse of Release</returns>
        ApiResponse<Release> GetReleaseByBadgeWithHttpInfo (string bucketid, string badgename);
        /// <summary>
        /// Get counts of changes between releases
        /// </summary>
        /// <remarks>
        /// Gets the change count between two releases.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="fromreleaseid">From Release ID, specify &#39;latest&#39; to use the most recent release. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="fromreleasenum">From Release Number. To query against an empty bucket you may set fromreleasenum to zero. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="toreleaseid">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="toreleasenum">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <returns>Changecount</returns>
        Changecount GetReleaseDiff (string bucketid, string fromreleaseid, int? fromreleasenum, string toreleaseid = null, int? toreleasenum = null);

        /// <summary>
        /// Get counts of changes between releases
        /// </summary>
        /// <remarks>
        /// Gets the change count between two releases.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="fromreleaseid">From Release ID, specify &#39;latest&#39; to use the most recent release. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="fromreleasenum">From Release Number. To query against an empty bucket you may set fromreleasenum to zero. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="toreleaseid">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="toreleasenum">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <returns>ApiResponse of Changecount</returns>
        ApiResponse<Changecount> GetReleaseDiffWithHttpInfo (string bucketid, string fromreleaseid, int? fromreleasenum, string toreleaseid = null, int? toreleasenum = null);
        /// <summary>
        /// Get changed entries between releases
        /// </summary>
        /// <remarks>
        /// Gets the list of changed entries between two releases.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="fromreleaseid">From Release ID, specify &#39;latest&#39; to use the most recent release. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="fromreleasenum">From Release Number. To query against an empty bucket you may set fromreleasenum to zero. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="toreleaseid">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="toreleasenum">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <param name="path">Path (optional)</param>
        /// <param name="includeStates">Include change states, one or more can be specified. The default is all states. (optional)</param>
        /// <returns>List&lt;Releaseentry&gt;</returns>
        List<Releaseentry> GetReleaseDiffEntries (string bucketid, string fromreleaseid, int? fromreleasenum, string toreleaseid = null, int? toreleasenum = null, int? page = null, int? perPage = null, string path = null, List<string> includeStates = null);

        /// <summary>
        /// Get changed entries between releases
        /// </summary>
        /// <remarks>
        /// Gets the list of changed entries between two releases.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="fromreleaseid">From Release ID, specify &#39;latest&#39; to use the most recent release. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="fromreleasenum">From Release Number. To query against an empty bucket you may set fromreleasenum to zero. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="toreleaseid">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="toreleasenum">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <param name="path">Path (optional)</param>
        /// <param name="includeStates">Include change states, one or more can be specified. The default is all states. (optional)</param>
        /// <returns>ApiResponse of List&lt;Releaseentry&gt;</returns>
        ApiResponse<List<Releaseentry>> GetReleaseDiffEntriesWithHttpInfo (string bucketid, string fromreleaseid, int? fromreleasenum, string toreleaseid = null, int? toreleasenum = null, int? page = null, int? perPage = null, string path = null, List<string> includeStates = null);
        /// <summary>
        /// Get release entries
        /// </summary>
        /// <remarks>
        /// Gets all entries for a single release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <param name="label">Label (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>List&lt;Releaseentry&gt;</returns>
        List<Releaseentry> GetReleaseEntries (string bucketid, string releaseid, string label = null, int? page = null, int? perPage = null);

        /// <summary>
        /// Get release entries
        /// </summary>
        /// <remarks>
        /// Gets all entries for a single release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <param name="label">Label (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Releaseentry&gt;</returns>
        ApiResponse<List<Releaseentry>> GetReleaseEntriesWithHttpInfo (string bucketid, string releaseid, string label = null, int? page = null, int? perPage = null);
        /// <summary>
        /// Get badged release entries
        /// </summary>
        /// <remarks>
        /// Gets all entries for a badged release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <param name="label">Label (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>List&lt;Releaseentry&gt;</returns>
        List<Releaseentry> GetReleaseEntriesByBadge (string bucketid, string badgename, string label = null, int? page = null, int? perPage = null);

        /// <summary>
        /// Get badged release entries
        /// </summary>
        /// <remarks>
        /// Gets all entries for a badged release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <param name="label">Label (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Releaseentry&gt;</returns>
        ApiResponse<List<Releaseentry>> GetReleaseEntriesByBadgeWithHttpInfo (string bucketid, string badgename, string label = null, int? page = null, int? perPage = null);
        /// <summary>
        /// Get releases for bucket
        /// </summary>
        /// <remarks>
        /// Gets all releases for a given bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>List&lt;Release&gt;</returns>
        List<Release> GetReleases (string bucketid, int? page = null, int? perPage = null);

        /// <summary>
        /// Get releases for bucket
        /// </summary>
        /// <remarks>
        /// Gets all releases for a given bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Release&gt;</returns>
        ApiResponse<List<Release>> GetReleasesWithHttpInfo (string bucketid, int? page = null, int? perPage = null);
        /// <summary>
        /// Update release
        /// </summary>
        /// <remarks>
        /// Update fields on a single release for a given bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <param name="release">Release fields to update</param>
        /// <returns>Release</returns>
        Release UpdateRelease (string bucketid, string releaseid, ReleaseUpdate release);

        /// <summary>
        /// Update release
        /// </summary>
        /// <remarks>
        /// Update fields on a single release for a given bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <param name="release">Release fields to update</param>
        /// <returns>ApiResponse of Release</returns>
        ApiResponse<Release> UpdateReleaseWithHttpInfo (string bucketid, string releaseid, ReleaseUpdate release);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create release
        /// </summary>
        /// <remarks>
        /// Creates a new release for a given bucket. If you don&#39;t specify the snapshot or entries fields all entries currently in the bucket will be added to the release. Otherwise you can use the snapshot field to create a release with all entries prior to a given date, or the entries field to provide a list of entryids and versionids to add.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="release">Release</param>
        /// <returns>Task of Release</returns>
        System.Threading.Tasks.Task<Release> CreateReleaseAsync (string bucketid, ReleaseCreate release);

        /// <summary>
        /// Create release
        /// </summary>
        /// <remarks>
        /// Creates a new release for a given bucket. If you don&#39;t specify the snapshot or entries fields all entries currently in the bucket will be added to the release. Otherwise you can use the snapshot field to create a release with all entries prior to a given date, or the entries field to provide a list of entryids and versionids to add.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="release">Release</param>
        /// <returns>Task of ApiResponse (Release)</returns>
        System.Threading.Tasks.Task<ApiResponse<Release>> CreateReleaseAsyncWithHttpInfo (string bucketid, ReleaseCreate release);
        /// <summary>
        /// Get release
        /// </summary>
        /// <remarks>
        /// Gets a single release for a given bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <returns>Task of Release</returns>
        System.Threading.Tasks.Task<Release> GetReleaseAsync (string bucketid, string releaseid);

        /// <summary>
        /// Get release
        /// </summary>
        /// <remarks>
        /// Gets a single release for a given bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <returns>Task of ApiResponse (Release)</returns>
        System.Threading.Tasks.Task<ApiResponse<Release>> GetReleaseAsyncWithHttpInfo (string bucketid, string releaseid);
        /// <summary>
        /// Get release by badge
        /// </summary>
        /// <remarks>
        /// Gets a badged release for a given bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>Task of Release</returns>
        System.Threading.Tasks.Task<Release> GetReleaseByBadgeAsync (string bucketid, string badgename);

        /// <summary>
        /// Get release by badge
        /// </summary>
        /// <remarks>
        /// Gets a badged release for a given bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>Task of ApiResponse (Release)</returns>
        System.Threading.Tasks.Task<ApiResponse<Release>> GetReleaseByBadgeAsyncWithHttpInfo (string bucketid, string badgename);
        /// <summary>
        /// Get counts of changes between releases
        /// </summary>
        /// <remarks>
        /// Gets the change count between two releases.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="fromreleaseid">From Release ID, specify &#39;latest&#39; to use the most recent release. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="fromreleasenum">From Release Number. To query against an empty bucket you may set fromreleasenum to zero. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="toreleaseid">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="toreleasenum">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <returns>Task of Changecount</returns>
        System.Threading.Tasks.Task<Changecount> GetReleaseDiffAsync (string bucketid, string fromreleaseid, int? fromreleasenum, string toreleaseid = null, int? toreleasenum = null);

        /// <summary>
        /// Get counts of changes between releases
        /// </summary>
        /// <remarks>
        /// Gets the change count between two releases.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="fromreleaseid">From Release ID, specify &#39;latest&#39; to use the most recent release. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="fromreleasenum">From Release Number. To query against an empty bucket you may set fromreleasenum to zero. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="toreleaseid">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="toreleasenum">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <returns>Task of ApiResponse (Changecount)</returns>
        System.Threading.Tasks.Task<ApiResponse<Changecount>> GetReleaseDiffAsyncWithHttpInfo (string bucketid, string fromreleaseid, int? fromreleasenum, string toreleaseid = null, int? toreleasenum = null);
        /// <summary>
        /// Get changed entries between releases
        /// </summary>
        /// <remarks>
        /// Gets the list of changed entries between two releases.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="fromreleaseid">From Release ID, specify &#39;latest&#39; to use the most recent release. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="fromreleasenum">From Release Number. To query against an empty bucket you may set fromreleasenum to zero. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="toreleaseid">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="toreleasenum">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <param name="path">Path (optional)</param>
        /// <param name="includeStates">Include change states, one or more can be specified. The default is all states. (optional)</param>
        /// <returns>Task of List&lt;Releaseentry&gt;</returns>
        System.Threading.Tasks.Task<List<Releaseentry>> GetReleaseDiffEntriesAsync (string bucketid, string fromreleaseid, int? fromreleasenum, string toreleaseid = null, int? toreleasenum = null, int? page = null, int? perPage = null, string path = null, List<string> includeStates = null);

        /// <summary>
        /// Get changed entries between releases
        /// </summary>
        /// <remarks>
        /// Gets the list of changed entries between two releases.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="fromreleaseid">From Release ID, specify &#39;latest&#39; to use the most recent release. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="fromreleasenum">From Release Number. To query against an empty bucket you may set fromreleasenum to zero. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="toreleaseid">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="toreleasenum">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <param name="path">Path (optional)</param>
        /// <param name="includeStates">Include change states, one or more can be specified. The default is all states. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Releaseentry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Releaseentry>>> GetReleaseDiffEntriesAsyncWithHttpInfo (string bucketid, string fromreleaseid, int? fromreleasenum, string toreleaseid = null, int? toreleasenum = null, int? page = null, int? perPage = null, string path = null, List<string> includeStates = null);
        /// <summary>
        /// Get release entries
        /// </summary>
        /// <remarks>
        /// Gets all entries for a single release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <param name="label">Label (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of List&lt;Releaseentry&gt;</returns>
        System.Threading.Tasks.Task<List<Releaseentry>> GetReleaseEntriesAsync (string bucketid, string releaseid, string label = null, int? page = null, int? perPage = null);

        /// <summary>
        /// Get release entries
        /// </summary>
        /// <remarks>
        /// Gets all entries for a single release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <param name="label">Label (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Releaseentry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Releaseentry>>> GetReleaseEntriesAsyncWithHttpInfo (string bucketid, string releaseid, string label = null, int? page = null, int? perPage = null);
        /// <summary>
        /// Get badged release entries
        /// </summary>
        /// <remarks>
        /// Gets all entries for a badged release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <param name="label">Label (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of List&lt;Releaseentry&gt;</returns>
        System.Threading.Tasks.Task<List<Releaseentry>> GetReleaseEntriesByBadgeAsync (string bucketid, string badgename, string label = null, int? page = null, int? perPage = null);

        /// <summary>
        /// Get badged release entries
        /// </summary>
        /// <remarks>
        /// Gets all entries for a badged release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <param name="label">Label (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Releaseentry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Releaseentry>>> GetReleaseEntriesByBadgeAsyncWithHttpInfo (string bucketid, string badgename, string label = null, int? page = null, int? perPage = null);
        /// <summary>
        /// Get releases for bucket
        /// </summary>
        /// <remarks>
        /// Gets all releases for a given bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of List&lt;Release&gt;</returns>
        System.Threading.Tasks.Task<List<Release>> GetReleasesAsync (string bucketid, int? page = null, int? perPage = null);

        /// <summary>
        /// Get releases for bucket
        /// </summary>
        /// <remarks>
        /// Gets all releases for a given bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Release&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Release>>> GetReleasesAsyncWithHttpInfo (string bucketid, int? page = null, int? perPage = null);
        /// <summary>
        /// Update release
        /// </summary>
        /// <remarks>
        /// Update fields on a single release for a given bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <param name="release">Release fields to update</param>
        /// <returns>Task of Release</returns>
        System.Threading.Tasks.Task<Release> UpdateReleaseAsync (string bucketid, string releaseid, ReleaseUpdate release);

        /// <summary>
        /// Update release
        /// </summary>
        /// <remarks>
        /// Update fields on a single release for a given bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <param name="release">Release fields to update</param>
        /// <returns>Task of ApiResponse (Release)</returns>
        System.Threading.Tasks.Task<ApiResponse<Release>> UpdateReleaseAsyncWithHttpInfo (string bucketid, string releaseid, ReleaseUpdate release);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReleasesApi : IReleasesApi
    {
        private CloudContentDeliveryManagment.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReleasesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReleasesApi(String basePath)
        {
            this.Configuration = new CloudContentDeliveryManagment.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CloudContentDeliveryManagment.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReleasesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReleasesApi(CloudContentDeliveryManagment.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CloudContentDeliveryManagment.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CloudContentDeliveryManagment.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CloudContentDeliveryManagment.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CloudContentDeliveryManagment.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create release Creates a new release for a given bucket. If you don&#39;t specify the snapshot or entries fields all entries currently in the bucket will be added to the release. Otherwise you can use the snapshot field to create a release with all entries prior to a given date, or the entries field to provide a list of entryids and versionids to add.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="release">Release</param>
        /// <returns>Release</returns>
        public Release CreateRelease (string bucketid, ReleaseCreate release)
        {
             ApiResponse<Release> localVarResponse = CreateReleaseWithHttpInfo(bucketid, release);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create release Creates a new release for a given bucket. If you don&#39;t specify the snapshot or entries fields all entries currently in the bucket will be added to the release. Otherwise you can use the snapshot field to create a release with all entries prior to a given date, or the entries field to provide a list of entryids and versionids to add.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="release">Release</param>
        /// <returns>ApiResponse of Release</returns>
        public ApiResponse< Release > CreateReleaseWithHttpInfo (string bucketid, ReleaseCreate release)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling ReleasesApi->CreateRelease");
            // verify the required parameter 'release' is set
            if (release == null)
                throw new ApiException(400, "Missing required parameter 'release' when calling ReleasesApi->CreateRelease");

            var localVarPath = "/buckets/{bucketid}/releases/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (release != null && release.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(release); // http body (model) parameter
            }
            else
            {
                localVarPostBody = release; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Release>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Release) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Release)));
        }

        /// <summary>
        /// Create release Creates a new release for a given bucket. If you don&#39;t specify the snapshot or entries fields all entries currently in the bucket will be added to the release. Otherwise you can use the snapshot field to create a release with all entries prior to a given date, or the entries field to provide a list of entryids and versionids to add.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="release">Release</param>
        /// <returns>Task of Release</returns>
        public async System.Threading.Tasks.Task<Release> CreateReleaseAsync (string bucketid, ReleaseCreate release)
        {
             ApiResponse<Release> localVarResponse = await CreateReleaseAsyncWithHttpInfo(bucketid, release);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create release Creates a new release for a given bucket. If you don&#39;t specify the snapshot or entries fields all entries currently in the bucket will be added to the release. Otherwise you can use the snapshot field to create a release with all entries prior to a given date, or the entries field to provide a list of entryids and versionids to add.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="release">Release</param>
        /// <returns>Task of ApiResponse (Release)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Release>> CreateReleaseAsyncWithHttpInfo (string bucketid, ReleaseCreate release)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling ReleasesApi->CreateRelease");
            // verify the required parameter 'release' is set
            if (release == null)
                throw new ApiException(400, "Missing required parameter 'release' when calling ReleasesApi->CreateRelease");

            var localVarPath = "/buckets/{bucketid}/releases/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (release != null && release.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(release); // http body (model) parameter
            }
            else
            {
                localVarPostBody = release; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Release>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Release) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Release)));
        }

        /// <summary>
        /// Get release Gets a single release for a given bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <returns>Release</returns>
        public Release GetRelease (string bucketid, string releaseid)
        {
             ApiResponse<Release> localVarResponse = GetReleaseWithHttpInfo(bucketid, releaseid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get release Gets a single release for a given bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <returns>ApiResponse of Release</returns>
        public ApiResponse< Release > GetReleaseWithHttpInfo (string bucketid, string releaseid)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling ReleasesApi->GetRelease");
            // verify the required parameter 'releaseid' is set
            if (releaseid == null)
                throw new ApiException(400, "Missing required parameter 'releaseid' when calling ReleasesApi->GetRelease");

            var localVarPath = "/buckets/{bucketid}/releases/{releaseid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (releaseid != null) localVarPathParams.Add("releaseid", this.Configuration.ApiClient.ParameterToString(releaseid)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Release>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Release) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Release)));
        }

        /// <summary>
        /// Get release Gets a single release for a given bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <returns>Task of Release</returns>
        public async System.Threading.Tasks.Task<Release> GetReleaseAsync (string bucketid, string releaseid)
        {
             ApiResponse<Release> localVarResponse = await GetReleaseAsyncWithHttpInfo(bucketid, releaseid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get release Gets a single release for a given bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <returns>Task of ApiResponse (Release)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Release>> GetReleaseAsyncWithHttpInfo (string bucketid, string releaseid)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling ReleasesApi->GetRelease");
            // verify the required parameter 'releaseid' is set
            if (releaseid == null)
                throw new ApiException(400, "Missing required parameter 'releaseid' when calling ReleasesApi->GetRelease");

            var localVarPath = "/buckets/{bucketid}/releases/{releaseid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (releaseid != null) localVarPathParams.Add("releaseid", this.Configuration.ApiClient.ParameterToString(releaseid)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Release>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Release) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Release)));
        }

        /// <summary>
        /// Get release by badge Gets a badged release for a given bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>Release</returns>
        public Release GetReleaseByBadge (string bucketid, string badgename)
        {
             ApiResponse<Release> localVarResponse = GetReleaseByBadgeWithHttpInfo(bucketid, badgename);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get release by badge Gets a badged release for a given bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>ApiResponse of Release</returns>
        public ApiResponse< Release > GetReleaseByBadgeWithHttpInfo (string bucketid, string badgename)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling ReleasesApi->GetReleaseByBadge");
            // verify the required parameter 'badgename' is set
            if (badgename == null)
                throw new ApiException(400, "Missing required parameter 'badgename' when calling ReleasesApi->GetReleaseByBadge");

            var localVarPath = "/buckets/{bucketid}/release_by_badge/{badgename}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (badgename != null) localVarPathParams.Add("badgename", this.Configuration.ApiClient.ParameterToString(badgename)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReleaseByBadge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Release>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Release) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Release)));
        }

        /// <summary>
        /// Get release by badge Gets a badged release for a given bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>Task of Release</returns>
        public async System.Threading.Tasks.Task<Release> GetReleaseByBadgeAsync (string bucketid, string badgename)
        {
             ApiResponse<Release> localVarResponse = await GetReleaseByBadgeAsyncWithHttpInfo(bucketid, badgename);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get release by badge Gets a badged release for a given bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>Task of ApiResponse (Release)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Release>> GetReleaseByBadgeAsyncWithHttpInfo (string bucketid, string badgename)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling ReleasesApi->GetReleaseByBadge");
            // verify the required parameter 'badgename' is set
            if (badgename == null)
                throw new ApiException(400, "Missing required parameter 'badgename' when calling ReleasesApi->GetReleaseByBadge");

            var localVarPath = "/buckets/{bucketid}/release_by_badge/{badgename}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (badgename != null) localVarPathParams.Add("badgename", this.Configuration.ApiClient.ParameterToString(badgename)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReleaseByBadge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Release>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Release) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Release)));
        }

        /// <summary>
        /// Get counts of changes between releases Gets the change count between two releases.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="fromreleaseid">From Release ID, specify &#39;latest&#39; to use the most recent release. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="fromreleasenum">From Release Number. To query against an empty bucket you may set fromreleasenum to zero. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="toreleaseid">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="toreleasenum">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <returns>Changecount</returns>
        public Changecount GetReleaseDiff (string bucketid, string fromreleaseid, int? fromreleasenum, string toreleaseid = null, int? toreleasenum = null)
        {
             ApiResponse<Changecount> localVarResponse = GetReleaseDiffWithHttpInfo(bucketid, fromreleaseid, fromreleasenum, toreleaseid, toreleasenum);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get counts of changes between releases Gets the change count between two releases.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="fromreleaseid">From Release ID, specify &#39;latest&#39; to use the most recent release. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="fromreleasenum">From Release Number. To query against an empty bucket you may set fromreleasenum to zero. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="toreleaseid">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="toreleasenum">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <returns>ApiResponse of Changecount</returns>
        public ApiResponse< Changecount > GetReleaseDiffWithHttpInfo (string bucketid, string fromreleaseid, int? fromreleasenum, string toreleaseid = null, int? toreleasenum = null)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling ReleasesApi->GetReleaseDiff");
            // verify the required parameter 'fromreleaseid' is set
            if (fromreleaseid == null)
                throw new ApiException(400, "Missing required parameter 'fromreleaseid' when calling ReleasesApi->GetReleaseDiff");
            // verify the required parameter 'fromreleasenum' is set
            if (fromreleasenum == null)
                throw new ApiException(400, "Missing required parameter 'fromreleasenum' when calling ReleasesApi->GetReleaseDiff");

            var localVarPath = "/buckets/{bucketid}/diff/releases/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (fromreleaseid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromreleaseid", fromreleaseid)); // query parameter
            if (fromreleasenum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromreleasenum", fromreleasenum)); // query parameter
            if (toreleaseid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toreleaseid", toreleaseid)); // query parameter
            if (toreleasenum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toreleasenum", toreleasenum)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReleaseDiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Changecount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Changecount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Changecount)));
        }

        /// <summary>
        /// Get counts of changes between releases Gets the change count between two releases.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="fromreleaseid">From Release ID, specify &#39;latest&#39; to use the most recent release. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="fromreleasenum">From Release Number. To query against an empty bucket you may set fromreleasenum to zero. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="toreleaseid">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="toreleasenum">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <returns>Task of Changecount</returns>
        public async System.Threading.Tasks.Task<Changecount> GetReleaseDiffAsync (string bucketid, string fromreleaseid, int? fromreleasenum, string toreleaseid = null, int? toreleasenum = null)
        {
             ApiResponse<Changecount> localVarResponse = await GetReleaseDiffAsyncWithHttpInfo(bucketid, fromreleaseid, fromreleasenum, toreleaseid, toreleasenum);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get counts of changes between releases Gets the change count between two releases.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="fromreleaseid">From Release ID, specify &#39;latest&#39; to use the most recent release. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="fromreleasenum">From Release Number. To query against an empty bucket you may set fromreleasenum to zero. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="toreleaseid">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="toreleasenum">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <returns>Task of ApiResponse (Changecount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Changecount>> GetReleaseDiffAsyncWithHttpInfo (string bucketid, string fromreleaseid, int? fromreleasenum, string toreleaseid = null, int? toreleasenum = null)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling ReleasesApi->GetReleaseDiff");
            // verify the required parameter 'fromreleaseid' is set
            if (fromreleaseid == null)
                throw new ApiException(400, "Missing required parameter 'fromreleaseid' when calling ReleasesApi->GetReleaseDiff");
            // verify the required parameter 'fromreleasenum' is set
            if (fromreleasenum == null)
                throw new ApiException(400, "Missing required parameter 'fromreleasenum' when calling ReleasesApi->GetReleaseDiff");

            var localVarPath = "/buckets/{bucketid}/diff/releases/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (fromreleaseid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromreleaseid", fromreleaseid)); // query parameter
            if (fromreleasenum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromreleasenum", fromreleasenum)); // query parameter
            if (toreleaseid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toreleaseid", toreleaseid)); // query parameter
            if (toreleasenum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toreleasenum", toreleasenum)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReleaseDiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Changecount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Changecount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Changecount)));
        }

        /// <summary>
        /// Get changed entries between releases Gets the list of changed entries between two releases.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="fromreleaseid">From Release ID, specify &#39;latest&#39; to use the most recent release. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="fromreleasenum">From Release Number. To query against an empty bucket you may set fromreleasenum to zero. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="toreleaseid">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="toreleasenum">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <param name="path">Path (optional)</param>
        /// <param name="includeStates">Include change states, one or more can be specified. The default is all states. (optional)</param>
        /// <returns>List&lt;Releaseentry&gt;</returns>
        public List<Releaseentry> GetReleaseDiffEntries (string bucketid, string fromreleaseid, int? fromreleasenum, string toreleaseid = null, int? toreleasenum = null, int? page = null, int? perPage = null, string path = null, List<string> includeStates = null)
        {
             ApiResponse<List<Releaseentry>> localVarResponse = GetReleaseDiffEntriesWithHttpInfo(bucketid, fromreleaseid, fromreleasenum, toreleaseid, toreleasenum, page, perPage, path, includeStates);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get changed entries between releases Gets the list of changed entries between two releases.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="fromreleaseid">From Release ID, specify &#39;latest&#39; to use the most recent release. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="fromreleasenum">From Release Number. To query against an empty bucket you may set fromreleasenum to zero. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="toreleaseid">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="toreleasenum">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <param name="path">Path (optional)</param>
        /// <param name="includeStates">Include change states, one or more can be specified. The default is all states. (optional)</param>
        /// <returns>ApiResponse of List&lt;Releaseentry&gt;</returns>
        public ApiResponse< List<Releaseentry> > GetReleaseDiffEntriesWithHttpInfo (string bucketid, string fromreleaseid, int? fromreleasenum, string toreleaseid = null, int? toreleasenum = null, int? page = null, int? perPage = null, string path = null, List<string> includeStates = null)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling ReleasesApi->GetReleaseDiffEntries");
            // verify the required parameter 'fromreleaseid' is set
            if (fromreleaseid == null)
                throw new ApiException(400, "Missing required parameter 'fromreleaseid' when calling ReleasesApi->GetReleaseDiffEntries");
            // verify the required parameter 'fromreleasenum' is set
            if (fromreleasenum == null)
                throw new ApiException(400, "Missing required parameter 'fromreleasenum' when calling ReleasesApi->GetReleaseDiffEntries");

            var localVarPath = "/buckets/{bucketid}/diff/releases/entries/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (fromreleaseid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromreleaseid", fromreleaseid)); // query parameter
            if (fromreleasenum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromreleasenum", fromreleasenum)); // query parameter
            if (toreleaseid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toreleaseid", toreleaseid)); // query parameter
            if (toreleasenum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toreleasenum", toreleasenum)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (includeStates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "include_states", includeStates)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReleaseDiffEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Releaseentry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Releaseentry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Releaseentry>)));
        }

        /// <summary>
        /// Get changed entries between releases Gets the list of changed entries between two releases.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="fromreleaseid">From Release ID, specify &#39;latest&#39; to use the most recent release. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="fromreleasenum">From Release Number. To query against an empty bucket you may set fromreleasenum to zero. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="toreleaseid">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="toreleasenum">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <param name="path">Path (optional)</param>
        /// <param name="includeStates">Include change states, one or more can be specified. The default is all states. (optional)</param>
        /// <returns>Task of List&lt;Releaseentry&gt;</returns>
        public async System.Threading.Tasks.Task<List<Releaseentry>> GetReleaseDiffEntriesAsync (string bucketid, string fromreleaseid, int? fromreleasenum, string toreleaseid = null, int? toreleasenum = null, int? page = null, int? perPage = null, string path = null, List<string> includeStates = null)
        {
             ApiResponse<List<Releaseentry>> localVarResponse = await GetReleaseDiffEntriesAsyncWithHttpInfo(bucketid, fromreleaseid, fromreleasenum, toreleaseid, toreleasenum, page, perPage, path, includeStates);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get changed entries between releases Gets the list of changed entries between two releases.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="fromreleaseid">From Release ID, specify &#39;latest&#39; to use the most recent release. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="fromreleasenum">From Release Number. To query against an empty bucket you may set fromreleasenum to zero. Either fromreleaseid or fromreleasenum can be specified, but not both. </param>
        /// <param name="toreleaseid">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="toreleasenum">To Release ID, when not specified the most recent state of the bucket will be used. Either toreleaseid or toreleasenum can be specified, but not both.  (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <param name="path">Path (optional)</param>
        /// <param name="includeStates">Include change states, one or more can be specified. The default is all states. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Releaseentry&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Releaseentry>>> GetReleaseDiffEntriesAsyncWithHttpInfo (string bucketid, string fromreleaseid, int? fromreleasenum, string toreleaseid = null, int? toreleasenum = null, int? page = null, int? perPage = null, string path = null, List<string> includeStates = null)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling ReleasesApi->GetReleaseDiffEntries");
            // verify the required parameter 'fromreleaseid' is set
            if (fromreleaseid == null)
                throw new ApiException(400, "Missing required parameter 'fromreleaseid' when calling ReleasesApi->GetReleaseDiffEntries");
            // verify the required parameter 'fromreleasenum' is set
            if (fromreleasenum == null)
                throw new ApiException(400, "Missing required parameter 'fromreleasenum' when calling ReleasesApi->GetReleaseDiffEntries");

            var localVarPath = "/buckets/{bucketid}/diff/releases/entries/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (fromreleaseid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromreleaseid", fromreleaseid)); // query parameter
            if (fromreleasenum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromreleasenum", fromreleasenum)); // query parameter
            if (toreleaseid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toreleaseid", toreleaseid)); // query parameter
            if (toreleasenum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toreleasenum", toreleasenum)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (includeStates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "include_states", includeStates)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReleaseDiffEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Releaseentry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Releaseentry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Releaseentry>)));
        }

        /// <summary>
        /// Get release entries Gets all entries for a single release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <param name="label">Label (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>List&lt;Releaseentry&gt;</returns>
        public List<Releaseentry> GetReleaseEntries (string bucketid, string releaseid, string label = null, int? page = null, int? perPage = null)
        {
             ApiResponse<List<Releaseentry>> localVarResponse = GetReleaseEntriesWithHttpInfo(bucketid, releaseid, label, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get release entries Gets all entries for a single release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <param name="label">Label (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Releaseentry&gt;</returns>
        public ApiResponse< List<Releaseentry> > GetReleaseEntriesWithHttpInfo (string bucketid, string releaseid, string label = null, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling ReleasesApi->GetReleaseEntries");
            // verify the required parameter 'releaseid' is set
            if (releaseid == null)
                throw new ApiException(400, "Missing required parameter 'releaseid' when calling ReleasesApi->GetReleaseEntries");

            var localVarPath = "/buckets/{bucketid}/releases/{releaseid}/entries/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (releaseid != null) localVarPathParams.Add("releaseid", this.Configuration.ApiClient.ParameterToString(releaseid)); // path parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReleaseEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Releaseentry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Releaseentry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Releaseentry>)));
        }

        /// <summary>
        /// Get release entries Gets all entries for a single release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <param name="label">Label (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of List&lt;Releaseentry&gt;</returns>
        public async System.Threading.Tasks.Task<List<Releaseentry>> GetReleaseEntriesAsync (string bucketid, string releaseid, string label = null, int? page = null, int? perPage = null)
        {
             ApiResponse<List<Releaseentry>> localVarResponse = await GetReleaseEntriesAsyncWithHttpInfo(bucketid, releaseid, label, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get release entries Gets all entries for a single release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <param name="label">Label (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Releaseentry&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Releaseentry>>> GetReleaseEntriesAsyncWithHttpInfo (string bucketid, string releaseid, string label = null, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling ReleasesApi->GetReleaseEntries");
            // verify the required parameter 'releaseid' is set
            if (releaseid == null)
                throw new ApiException(400, "Missing required parameter 'releaseid' when calling ReleasesApi->GetReleaseEntries");

            var localVarPath = "/buckets/{bucketid}/releases/{releaseid}/entries/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (releaseid != null) localVarPathParams.Add("releaseid", this.Configuration.ApiClient.ParameterToString(releaseid)); // path parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReleaseEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Releaseentry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Releaseentry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Releaseentry>)));
        }

        /// <summary>
        /// Get badged release entries Gets all entries for a badged release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <param name="label">Label (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>List&lt;Releaseentry&gt;</returns>
        public List<Releaseentry> GetReleaseEntriesByBadge (string bucketid, string badgename, string label = null, int? page = null, int? perPage = null)
        {
             ApiResponse<List<Releaseentry>> localVarResponse = GetReleaseEntriesByBadgeWithHttpInfo(bucketid, badgename, label, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get badged release entries Gets all entries for a badged release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <param name="label">Label (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Releaseentry&gt;</returns>
        public ApiResponse< List<Releaseentry> > GetReleaseEntriesByBadgeWithHttpInfo (string bucketid, string badgename, string label = null, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling ReleasesApi->GetReleaseEntriesByBadge");
            // verify the required parameter 'badgename' is set
            if (badgename == null)
                throw new ApiException(400, "Missing required parameter 'badgename' when calling ReleasesApi->GetReleaseEntriesByBadge");

            var localVarPath = "/buckets/{bucketid}/release_by_badge/{badgename}/entries/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (badgename != null) localVarPathParams.Add("badgename", this.Configuration.ApiClient.ParameterToString(badgename)); // path parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReleaseEntriesByBadge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Releaseentry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Releaseentry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Releaseentry>)));
        }

        /// <summary>
        /// Get badged release entries Gets all entries for a badged release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <param name="label">Label (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of List&lt;Releaseentry&gt;</returns>
        public async System.Threading.Tasks.Task<List<Releaseentry>> GetReleaseEntriesByBadgeAsync (string bucketid, string badgename, string label = null, int? page = null, int? perPage = null)
        {
             ApiResponse<List<Releaseentry>> localVarResponse = await GetReleaseEntriesByBadgeAsyncWithHttpInfo(bucketid, badgename, label, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get badged release entries Gets all entries for a badged release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <param name="label">Label (optional)</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Releaseentry&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Releaseentry>>> GetReleaseEntriesByBadgeAsyncWithHttpInfo (string bucketid, string badgename, string label = null, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling ReleasesApi->GetReleaseEntriesByBadge");
            // verify the required parameter 'badgename' is set
            if (badgename == null)
                throw new ApiException(400, "Missing required parameter 'badgename' when calling ReleasesApi->GetReleaseEntriesByBadge");

            var localVarPath = "/buckets/{bucketid}/release_by_badge/{badgename}/entries/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (badgename != null) localVarPathParams.Add("badgename", this.Configuration.ApiClient.ParameterToString(badgename)); // path parameter
            if (label != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReleaseEntriesByBadge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Releaseentry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Releaseentry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Releaseentry>)));
        }

        /// <summary>
        /// Get releases for bucket Gets all releases for a given bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>List&lt;Release&gt;</returns>
        public List<Release> GetReleases (string bucketid, int? page = null, int? perPage = null)
        {
             ApiResponse<List<Release>> localVarResponse = GetReleasesWithHttpInfo(bucketid, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get releases for bucket Gets all releases for a given bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Release&gt;</returns>
        public ApiResponse< List<Release> > GetReleasesWithHttpInfo (string bucketid, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling ReleasesApi->GetReleases");

            var localVarPath = "/buckets/{bucketid}/releases/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReleases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Release>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Release>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Release>)));
        }

        /// <summary>
        /// Get releases for bucket Gets all releases for a given bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of List&lt;Release&gt;</returns>
        public async System.Threading.Tasks.Task<List<Release>> GetReleasesAsync (string bucketid, int? page = null, int? perPage = null)
        {
             ApiResponse<List<Release>> localVarResponse = await GetReleasesAsyncWithHttpInfo(bucketid, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get releases for bucket Gets all releases for a given bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Release&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Release>>> GetReleasesAsyncWithHttpInfo (string bucketid, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling ReleasesApi->GetReleases");

            var localVarPath = "/buckets/{bucketid}/releases/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReleases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Release>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Release>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Release>)));
        }

        /// <summary>
        /// Update release Update fields on a single release for a given bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <param name="release">Release fields to update</param>
        /// <returns>Release</returns>
        public Release UpdateRelease (string bucketid, string releaseid, ReleaseUpdate release)
        {
             ApiResponse<Release> localVarResponse = UpdateReleaseWithHttpInfo(bucketid, releaseid, release);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update release Update fields on a single release for a given bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <param name="release">Release fields to update</param>
        /// <returns>ApiResponse of Release</returns>
        public ApiResponse< Release > UpdateReleaseWithHttpInfo (string bucketid, string releaseid, ReleaseUpdate release)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling ReleasesApi->UpdateRelease");
            // verify the required parameter 'releaseid' is set
            if (releaseid == null)
                throw new ApiException(400, "Missing required parameter 'releaseid' when calling ReleasesApi->UpdateRelease");
            // verify the required parameter 'release' is set
            if (release == null)
                throw new ApiException(400, "Missing required parameter 'release' when calling ReleasesApi->UpdateRelease");

            var localVarPath = "/buckets/{bucketid}/releases/{releaseid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (releaseid != null) localVarPathParams.Add("releaseid", this.Configuration.ApiClient.ParameterToString(releaseid)); // path parameter
            if (release != null && release.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(release); // http body (model) parameter
            }
            else
            {
                localVarPostBody = release; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Release>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Release) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Release)));
        }

        /// <summary>
        /// Update release Update fields on a single release for a given bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <param name="release">Release fields to update</param>
        /// <returns>Task of Release</returns>
        public async System.Threading.Tasks.Task<Release> UpdateReleaseAsync (string bucketid, string releaseid, ReleaseUpdate release)
        {
             ApiResponse<Release> localVarResponse = await UpdateReleaseAsyncWithHttpInfo(bucketid, releaseid, release);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update release Update fields on a single release for a given bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="releaseid">Release ID</param>
        /// <param name="release">Release fields to update</param>
        /// <returns>Task of ApiResponse (Release)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Release>> UpdateReleaseAsyncWithHttpInfo (string bucketid, string releaseid, ReleaseUpdate release)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling ReleasesApi->UpdateRelease");
            // verify the required parameter 'releaseid' is set
            if (releaseid == null)
                throw new ApiException(400, "Missing required parameter 'releaseid' when calling ReleasesApi->UpdateRelease");
            // verify the required parameter 'release' is set
            if (release == null)
                throw new ApiException(400, "Missing required parameter 'release' when calling ReleasesApi->UpdateRelease");

            var localVarPath = "/buckets/{bucketid}/releases/{releaseid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (releaseid != null) localVarPathParams.Add("releaseid", this.Configuration.ApiClient.ParameterToString(releaseid)); // path parameter
            if (release != null && release.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(release); // http body (model) parameter
            }
            else
            {
                localVarPostBody = release; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRelease", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Release>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Release) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Release)));
        }

    }
}
