/* 
 * Content Delivery Management API
 *
 * <p>Cloud Content Delivery is a managed cloud service that hosts and delivers content to end users worldwide.</p> <p>You are currently viewing the documentation for the <b>Management API</b>, intended to be used by developers at build time for managing content. Refer to the <a href=\"https://content-api.cloud.unity3d.com/doc_client/\">Content Delivery Client API</a> for documentation about the API intended to be used at runtime by your game client.</p> <h2>Client SDK</h2> <p>The Content Delivery Management API is based on Swagger. The <a href=\"https://swagger.io/tools/swagger-codegen/\">Swagger Code Generator</a> can generate client libraries to integrate with your projects.</p> <p>A <a href=\"https://content-api.cloud.unity3d.com/doc/doc.json\">JSON schema</a> is required to generate a client for this API version.</p> <h2>Authentication</h2> <p>The Content Delivery Management API requires an API key associated with your Unity developer account. To access your API Key, please visit the <a href=\"https://developer.cloud.unity3d.com\">developer dashboard</a>.</p> <p>To authenticate requests, include a Basic Authentication header as a base64-encoded string 'username:password', using your API key as the password (and empty username).</p> <p>For example, an API key value of 'd6d2c026bac44b1ea7ac0332694a830e' would include an Authorization header like:</p> <p><b>Authorization: Basic OmQ2ZDJjMDI2YmFjNDRiMWVhN2FjMDMzMjY5NGE4MzBl</b></p> <h2>Pagination</h2> <p>Paged results take two parameters: the number of results to return per page (?per_page) and the page number based on that per page amount (?page). Page numbering starts with 1 and the default page size is 10.</p> <p>For instance, if there are 40 results and you specify page=2&per_page=10, you will receive records 11-20. Paged results will also return a Content-Range header. In the example above the content range header will look like this:</p> <p><b>Content-Range: items 11-20/40</b></p>
 *
 * OpenAPI spec version: 0.9.112
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CloudContentDeliveryManagment.Client;
using CloudContentDeliveryManagment.Model;

namespace CloudContentDeliveryManagment.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBadgesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a badge
        /// </summary>
        /// <remarks>
        /// Removes a badge by name.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>Nocontent</returns>
        Nocontent DeleteBadge (string bucketid, string badgename);

        /// <summary>
        /// Delete a badge
        /// </summary>
        /// <remarks>
        /// Removes a badge by name.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>ApiResponse of Nocontent</returns>
        ApiResponse<Nocontent> DeleteBadgeWithHttpInfo (string bucketid, string badgename);
        /// <summary>
        /// Get badge
        /// </summary>
        /// <remarks>
        /// Gets a badge by name.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>Badge</returns>
        Badge GetBadge (string bucketid, string badgename);

        /// <summary>
        /// Get badge
        /// </summary>
        /// <remarks>
        /// Gets a badge by name.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>ApiResponse of Badge</returns>
        ApiResponse<Badge> GetBadgeWithHttpInfo (string bucketid, string badgename);
        /// <summary>
        /// Get badges
        /// </summary>
        /// <remarks>
        /// Gets all badges for a bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>List&lt;Badge&gt;</returns>
        List<Badge> ListBadges (string bucketid, int? page = null, int? perPage = null);

        /// <summary>
        /// Get badges
        /// </summary>
        /// <remarks>
        /// Gets all badges for a bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Badge&gt;</returns>
        ApiResponse<List<Badge>> ListBadgesWithHttpInfo (string bucketid, int? page = null, int? perPage = null);
        /// <summary>
        /// Assign a badge
        /// </summary>
        /// <remarks>
        /// Assigns a badge to a release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badge">Badge</param>
        /// <returns>Badge</returns>
        Badge UpdateBadge (string bucketid, BadgeAssign badge);

        /// <summary>
        /// Assign a badge
        /// </summary>
        /// <remarks>
        /// Assigns a badge to a release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badge">Badge</param>
        /// <returns>ApiResponse of Badge</returns>
        ApiResponse<Badge> UpdateBadgeWithHttpInfo (string bucketid, BadgeAssign badge);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a badge
        /// </summary>
        /// <remarks>
        /// Removes a badge by name.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>Task of Nocontent</returns>
        System.Threading.Tasks.Task<Nocontent> DeleteBadgeAsync (string bucketid, string badgename);

        /// <summary>
        /// Delete a badge
        /// </summary>
        /// <remarks>
        /// Removes a badge by name.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>Task of ApiResponse (Nocontent)</returns>
        System.Threading.Tasks.Task<ApiResponse<Nocontent>> DeleteBadgeAsyncWithHttpInfo (string bucketid, string badgename);
        /// <summary>
        /// Get badge
        /// </summary>
        /// <remarks>
        /// Gets a badge by name.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>Task of Badge</returns>
        System.Threading.Tasks.Task<Badge> GetBadgeAsync (string bucketid, string badgename);

        /// <summary>
        /// Get badge
        /// </summary>
        /// <remarks>
        /// Gets a badge by name.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>Task of ApiResponse (Badge)</returns>
        System.Threading.Tasks.Task<ApiResponse<Badge>> GetBadgeAsyncWithHttpInfo (string bucketid, string badgename);
        /// <summary>
        /// Get badges
        /// </summary>
        /// <remarks>
        /// Gets all badges for a bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of List&lt;Badge&gt;</returns>
        System.Threading.Tasks.Task<List<Badge>> ListBadgesAsync (string bucketid, int? page = null, int? perPage = null);

        /// <summary>
        /// Get badges
        /// </summary>
        /// <remarks>
        /// Gets all badges for a bucket.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Badge&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Badge>>> ListBadgesAsyncWithHttpInfo (string bucketid, int? page = null, int? perPage = null);
        /// <summary>
        /// Assign a badge
        /// </summary>
        /// <remarks>
        /// Assigns a badge to a release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badge">Badge</param>
        /// <returns>Task of Badge</returns>
        System.Threading.Tasks.Task<Badge> UpdateBadgeAsync (string bucketid, BadgeAssign badge);

        /// <summary>
        /// Assign a badge
        /// </summary>
        /// <remarks>
        /// Assigns a badge to a release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badge">Badge</param>
        /// <returns>Task of ApiResponse (Badge)</returns>
        System.Threading.Tasks.Task<ApiResponse<Badge>> UpdateBadgeAsyncWithHttpInfo (string bucketid, BadgeAssign badge);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BadgesApi : IBadgesApi
    {
        private CloudContentDeliveryManagment.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BadgesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BadgesApi(String basePath)
        {
            this.Configuration = new CloudContentDeliveryManagment.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CloudContentDeliveryManagment.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BadgesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BadgesApi(CloudContentDeliveryManagment.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CloudContentDeliveryManagment.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CloudContentDeliveryManagment.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CloudContentDeliveryManagment.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CloudContentDeliveryManagment.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a badge Removes a badge by name.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>Nocontent</returns>
        public Nocontent DeleteBadge (string bucketid, string badgename)
        {
             ApiResponse<Nocontent> localVarResponse = DeleteBadgeWithHttpInfo(bucketid, badgename);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a badge Removes a badge by name.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>ApiResponse of Nocontent</returns>
        public ApiResponse< Nocontent > DeleteBadgeWithHttpInfo (string bucketid, string badgename)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BadgesApi->DeleteBadge");
            // verify the required parameter 'badgename' is set
            if (badgename == null)
                throw new ApiException(400, "Missing required parameter 'badgename' when calling BadgesApi->DeleteBadge");

            var localVarPath = "/buckets/{bucketid}/badges/{badgename}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (badgename != null) localVarPathParams.Add("badgename", this.Configuration.ApiClient.ParameterToString(badgename)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBadge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Nocontent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Nocontent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Nocontent)));
        }

        /// <summary>
        /// Delete a badge Removes a badge by name.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>Task of Nocontent</returns>
        public async System.Threading.Tasks.Task<Nocontent> DeleteBadgeAsync (string bucketid, string badgename)
        {
             ApiResponse<Nocontent> localVarResponse = await DeleteBadgeAsyncWithHttpInfo(bucketid, badgename);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a badge Removes a badge by name.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>Task of ApiResponse (Nocontent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Nocontent>> DeleteBadgeAsyncWithHttpInfo (string bucketid, string badgename)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BadgesApi->DeleteBadge");
            // verify the required parameter 'badgename' is set
            if (badgename == null)
                throw new ApiException(400, "Missing required parameter 'badgename' when calling BadgesApi->DeleteBadge");

            var localVarPath = "/buckets/{bucketid}/badges/{badgename}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (badgename != null) localVarPathParams.Add("badgename", this.Configuration.ApiClient.ParameterToString(badgename)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBadge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Nocontent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Nocontent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Nocontent)));
        }

        /// <summary>
        /// Get badge Gets a badge by name.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>Badge</returns>
        public Badge GetBadge (string bucketid, string badgename)
        {
             ApiResponse<Badge> localVarResponse = GetBadgeWithHttpInfo(bucketid, badgename);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get badge Gets a badge by name.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>ApiResponse of Badge</returns>
        public ApiResponse< Badge > GetBadgeWithHttpInfo (string bucketid, string badgename)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BadgesApi->GetBadge");
            // verify the required parameter 'badgename' is set
            if (badgename == null)
                throw new ApiException(400, "Missing required parameter 'badgename' when calling BadgesApi->GetBadge");

            var localVarPath = "/buckets/{bucketid}/badges/{badgename}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (badgename != null) localVarPathParams.Add("badgename", this.Configuration.ApiClient.ParameterToString(badgename)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBadge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Badge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Badge) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Badge)));
        }

        /// <summary>
        /// Get badge Gets a badge by name.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>Task of Badge</returns>
        public async System.Threading.Tasks.Task<Badge> GetBadgeAsync (string bucketid, string badgename)
        {
             ApiResponse<Badge> localVarResponse = await GetBadgeAsyncWithHttpInfo(bucketid, badgename);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get badge Gets a badge by name.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badgename">Badge Name</param>
        /// <returns>Task of ApiResponse (Badge)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Badge>> GetBadgeAsyncWithHttpInfo (string bucketid, string badgename)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BadgesApi->GetBadge");
            // verify the required parameter 'badgename' is set
            if (badgename == null)
                throw new ApiException(400, "Missing required parameter 'badgename' when calling BadgesApi->GetBadge");

            var localVarPath = "/buckets/{bucketid}/badges/{badgename}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (badgename != null) localVarPathParams.Add("badgename", this.Configuration.ApiClient.ParameterToString(badgename)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBadge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Badge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Badge) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Badge)));
        }

        /// <summary>
        /// Get badges Gets all badges for a bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>List&lt;Badge&gt;</returns>
        public List<Badge> ListBadges (string bucketid, int? page = null, int? perPage = null)
        {
             ApiResponse<List<Badge>> localVarResponse = ListBadgesWithHttpInfo(bucketid, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get badges Gets all badges for a bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Badge&gt;</returns>
        public ApiResponse< List<Badge> > ListBadgesWithHttpInfo (string bucketid, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BadgesApi->ListBadges");

            var localVarPath = "/buckets/{bucketid}/badges/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBadges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Badge>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Badge>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Badge>)));
        }

        /// <summary>
        /// Get badges Gets all badges for a bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of List&lt;Badge&gt;</returns>
        public async System.Threading.Tasks.Task<List<Badge>> ListBadgesAsync (string bucketid, int? page = null, int? perPage = null)
        {
             ApiResponse<List<Badge>> localVarResponse = await ListBadgesAsyncWithHttpInfo(bucketid, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get badges Gets all badges for a bucket.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Badge&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Badge>>> ListBadgesAsyncWithHttpInfo (string bucketid, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BadgesApi->ListBadges");

            var localVarPath = "/buckets/{bucketid}/badges/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBadges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Badge>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Badge>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Badge>)));
        }

        /// <summary>
        /// Assign a badge Assigns a badge to a release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badge">Badge</param>
        /// <returns>Badge</returns>
        public Badge UpdateBadge (string bucketid, BadgeAssign badge)
        {
             ApiResponse<Badge> localVarResponse = UpdateBadgeWithHttpInfo(bucketid, badge);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign a badge Assigns a badge to a release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badge">Badge</param>
        /// <returns>ApiResponse of Badge</returns>
        public ApiResponse< Badge > UpdateBadgeWithHttpInfo (string bucketid, BadgeAssign badge)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BadgesApi->UpdateBadge");
            // verify the required parameter 'badge' is set
            if (badge == null)
                throw new ApiException(400, "Missing required parameter 'badge' when calling BadgesApi->UpdateBadge");

            var localVarPath = "/buckets/{bucketid}/badges/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (badge != null && badge.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(badge); // http body (model) parameter
            }
            else
            {
                localVarPostBody = badge; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBadge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Badge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Badge) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Badge)));
        }

        /// <summary>
        /// Assign a badge Assigns a badge to a release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badge">Badge</param>
        /// <returns>Task of Badge</returns>
        public async System.Threading.Tasks.Task<Badge> UpdateBadgeAsync (string bucketid, BadgeAssign badge)
        {
             ApiResponse<Badge> localVarResponse = await UpdateBadgeAsyncWithHttpInfo(bucketid, badge);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assign a badge Assigns a badge to a release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="badge">Badge</param>
        /// <returns>Task of ApiResponse (Badge)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Badge>> UpdateBadgeAsyncWithHttpInfo (string bucketid, BadgeAssign badge)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BadgesApi->UpdateBadge");
            // verify the required parameter 'badge' is set
            if (badge == null)
                throw new ApiException(400, "Missing required parameter 'badge' when calling BadgesApi->UpdateBadge");

            var localVarPath = "/buckets/{bucketid}/badges/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (badge != null && badge.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(badge); // http body (model) parameter
            }
            else
            {
                localVarPostBody = badge; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBadge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Badge>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Badge) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Badge)));
        }

    }
}
