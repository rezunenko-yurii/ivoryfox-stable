/* 
 * Content Delivery Management API
 *
 * <p>Cloud Content Delivery is a managed cloud service that hosts and delivers content to end users worldwide.</p> <p>You are currently viewing the documentation for the <b>Management API</b>, intended to be used by developers at build time for managing content. Refer to the <a href=\"https://content-api.cloud.unity3d.com/doc_client/\">Content Delivery Client API</a> for documentation about the API intended to be used at runtime by your game client.</p> <h2>Client SDK</h2> <p>The Content Delivery Management API is based on Swagger. The <a href=\"https://swagger.io/tools/swagger-codegen/\">Swagger Code Generator</a> can generate client libraries to integrate with your projects.</p> <p>A <a href=\"https://content-api.cloud.unity3d.com/doc/doc.json\">JSON schema</a> is required to generate a client for this API version.</p> <h2>Authentication</h2> <p>The Content Delivery Management API requires an API key associated with your Unity developer account. To access your API Key, please visit the <a href=\"https://developer.cloud.unity3d.com\">developer dashboard</a>.</p> <p>To authenticate requests, include a Basic Authentication header as a base64-encoded string 'username:password', using your API key as the password (and empty username).</p> <p>For example, an API key value of 'd6d2c026bac44b1ea7ac0332694a830e' would include an Authorization header like:</p> <p><b>Authorization: Basic OmQ2ZDJjMDI2YmFjNDRiMWVhN2FjMDMzMjY5NGE4MzBl</b></p> <h2>Pagination</h2> <p>Paged results take two parameters: the number of results to return per page (?per_page) and the page number based on that per page amount (?page). Page numbering starts with 1 and the default page size is 10.</p> <p>For instance, if there are 40 results and you specify page=2&per_page=10, you will receive records 11-20. Paged results will also return a Content-Range header. In the example above the content range header will look like this:</p> <p><b>Content-Range: items 11-20/40</b></p>
 *
 * OpenAPI spec version: 0.9.112
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CloudContentDeliveryManagment.Client;
using CloudContentDeliveryManagment.Model;

namespace CloudContentDeliveryManagment.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBucketsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create bucket
        /// </summary>
        /// <remarks>
        /// Create a bucket for a project.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectguid">Project GUID</param>
        /// <param name="bucket">Bucket</param>
        /// <returns>Bucket</returns>
        Bucket CreateBucketByProject (string projectguid, BucketCreate bucket);

        /// <summary>
        /// Create bucket
        /// </summary>
        /// <remarks>
        /// Create a bucket for a project.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectguid">Project GUID</param>
        /// <param name="bucket">Bucket</param>
        /// <returns>ApiResponse of Bucket</returns>
        ApiResponse<Bucket> CreateBucketByProjectWithHttpInfo (string projectguid, BucketCreate bucket);
        /// <summary>
        /// Delete a bucket
        /// </summary>
        /// <remarks>
        /// Removes a bucket by ID.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>Nocontent</returns>
        Nocontent DeleteBucket (string bucketid);

        /// <summary>
        /// Delete a bucket
        /// </summary>
        /// <remarks>
        /// Removes a bucket by ID.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>ApiResponse of Nocontent</returns>
        ApiResponse<Nocontent> DeleteBucketWithHttpInfo (string bucketid);
        /// <summary>
        /// Get a bucket
        /// </summary>
        /// <remarks>
        /// Gets the bucket details by ID.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>Bucket</returns>
        Bucket GetBucket (string bucketid);

        /// <summary>
        /// Get a bucket
        /// </summary>
        /// <remarks>
        /// Gets the bucket details by ID.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>ApiResponse of Bucket</returns>
        ApiResponse<Bucket> GetBucketWithHttpInfo (string bucketid);
        /// <summary>
        /// Get counts of changes since last release
        /// </summary>
        /// <remarks>
        /// Gets change count since the last release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>Changecount</returns>
        Changecount GetDiff (string bucketid);

        /// <summary>
        /// Get counts of changes since last release
        /// </summary>
        /// <remarks>
        /// Gets change count since the last release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>ApiResponse of Changecount</returns>
        ApiResponse<Changecount> GetDiffWithHttpInfo (string bucketid);
        /// <summary>
        /// Get changed entries since last releases
        /// </summary>
        /// <remarks>
        /// Gets changed entries since the last release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <param name="path">Path (optional)</param>
        /// <param name="includeStates">Include change states, one or more can be specified. The default is all states. (optional)</param>
        /// <returns>List&lt;Releaseentry&gt;</returns>
        List<Releaseentry> GetDiffEntries (string bucketid, int? page = null, int? perPage = null, string path = null, List<string> includeStates = null);

        /// <summary>
        /// Get changed entries since last releases
        /// </summary>
        /// <remarks>
        /// Gets changed entries since the last release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <param name="path">Path (optional)</param>
        /// <param name="includeStates">Include change states, one or more can be specified. The default is all states. (optional)</param>
        /// <returns>ApiResponse of List&lt;Releaseentry&gt;</returns>
        ApiResponse<List<Releaseentry>> GetDiffEntriesWithHttpInfo (string bucketid, int? page = null, int? perPage = null, string path = null, List<string> includeStates = null);
        /// <summary>
        /// Get buckets for project
        /// </summary>
        /// <remarks>
        /// Gets all buckets for a project.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectguid">Project GUID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>List&lt;Bucket&gt;</returns>
        List<Bucket> ListBucketsByProject (string projectguid, int? page = null, int? perPage = null);

        /// <summary>
        /// Get buckets for project
        /// </summary>
        /// <remarks>
        /// Gets all buckets for a project.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectguid">Project GUID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Bucket&gt;</returns>
        ApiResponse<List<Bucket>> ListBucketsByProjectWithHttpInfo (string projectguid, int? page = null, int? perPage = null);
        /// <summary>
        /// Promote release between buckets
        /// </summary>
        /// <remarks>
        /// Promotes a release from one bucket to another.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="bucket">PromoteBucket</param>
        /// <returns>Release</returns>
        Release PromoteBucket (string bucketid, Promotebucket bucket);

        /// <summary>
        /// Promote release between buckets
        /// </summary>
        /// <remarks>
        /// Promotes a release from one bucket to another.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="bucket">PromoteBucket</param>
        /// <returns>ApiResponse of Release</returns>
        ApiResponse<Release> PromoteBucketWithHttpInfo (string bucketid, Promotebucket bucket);
        /// <summary>
        /// Update a bucket
        /// </summary>
        /// <remarks>
        /// Updates the bucket details by ID.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="bucket">Bucket</param>
        /// <returns>Bucket</returns>
        Bucket UpdateBucket (string bucketid, BucketUpdate bucket);

        /// <summary>
        /// Update a bucket
        /// </summary>
        /// <remarks>
        /// Updates the bucket details by ID.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="bucket">Bucket</param>
        /// <returns>ApiResponse of Bucket</returns>
        ApiResponse<Bucket> UpdateBucketWithHttpInfo (string bucketid, BucketUpdate bucket);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create bucket
        /// </summary>
        /// <remarks>
        /// Create a bucket for a project.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectguid">Project GUID</param>
        /// <param name="bucket">Bucket</param>
        /// <returns>Task of Bucket</returns>
        System.Threading.Tasks.Task<Bucket> CreateBucketByProjectAsync (string projectguid, BucketCreate bucket);

        /// <summary>
        /// Create bucket
        /// </summary>
        /// <remarks>
        /// Create a bucket for a project.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectguid">Project GUID</param>
        /// <param name="bucket">Bucket</param>
        /// <returns>Task of ApiResponse (Bucket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Bucket>> CreateBucketByProjectAsyncWithHttpInfo (string projectguid, BucketCreate bucket);
        /// <summary>
        /// Delete a bucket
        /// </summary>
        /// <remarks>
        /// Removes a bucket by ID.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>Task of Nocontent</returns>
        System.Threading.Tasks.Task<Nocontent> DeleteBucketAsync (string bucketid);

        /// <summary>
        /// Delete a bucket
        /// </summary>
        /// <remarks>
        /// Removes a bucket by ID.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>Task of ApiResponse (Nocontent)</returns>
        System.Threading.Tasks.Task<ApiResponse<Nocontent>> DeleteBucketAsyncWithHttpInfo (string bucketid);
        /// <summary>
        /// Get a bucket
        /// </summary>
        /// <remarks>
        /// Gets the bucket details by ID.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>Task of Bucket</returns>
        System.Threading.Tasks.Task<Bucket> GetBucketAsync (string bucketid);

        /// <summary>
        /// Get a bucket
        /// </summary>
        /// <remarks>
        /// Gets the bucket details by ID.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>Task of ApiResponse (Bucket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Bucket>> GetBucketAsyncWithHttpInfo (string bucketid);
        /// <summary>
        /// Get counts of changes since last release
        /// </summary>
        /// <remarks>
        /// Gets change count since the last release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>Task of Changecount</returns>
        System.Threading.Tasks.Task<Changecount> GetDiffAsync (string bucketid);

        /// <summary>
        /// Get counts of changes since last release
        /// </summary>
        /// <remarks>
        /// Gets change count since the last release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>Task of ApiResponse (Changecount)</returns>
        System.Threading.Tasks.Task<ApiResponse<Changecount>> GetDiffAsyncWithHttpInfo (string bucketid);
        /// <summary>
        /// Get changed entries since last releases
        /// </summary>
        /// <remarks>
        /// Gets changed entries since the last release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <param name="path">Path (optional)</param>
        /// <param name="includeStates">Include change states, one or more can be specified. The default is all states. (optional)</param>
        /// <returns>Task of List&lt;Releaseentry&gt;</returns>
        System.Threading.Tasks.Task<List<Releaseentry>> GetDiffEntriesAsync (string bucketid, int? page = null, int? perPage = null, string path = null, List<string> includeStates = null);

        /// <summary>
        /// Get changed entries since last releases
        /// </summary>
        /// <remarks>
        /// Gets changed entries since the last release.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <param name="path">Path (optional)</param>
        /// <param name="includeStates">Include change states, one or more can be specified. The default is all states. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Releaseentry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Releaseentry>>> GetDiffEntriesAsyncWithHttpInfo (string bucketid, int? page = null, int? perPage = null, string path = null, List<string> includeStates = null);
        /// <summary>
        /// Get buckets for project
        /// </summary>
        /// <remarks>
        /// Gets all buckets for a project.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectguid">Project GUID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of List&lt;Bucket&gt;</returns>
        System.Threading.Tasks.Task<List<Bucket>> ListBucketsByProjectAsync (string projectguid, int? page = null, int? perPage = null);

        /// <summary>
        /// Get buckets for project
        /// </summary>
        /// <remarks>
        /// Gets all buckets for a project.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectguid">Project GUID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Bucket&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Bucket>>> ListBucketsByProjectAsyncWithHttpInfo (string projectguid, int? page = null, int? perPage = null);
        /// <summary>
        /// Promote release between buckets
        /// </summary>
        /// <remarks>
        /// Promotes a release from one bucket to another.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="bucket">PromoteBucket</param>
        /// <returns>Task of Release</returns>
        System.Threading.Tasks.Task<Release> PromoteBucketAsync (string bucketid, Promotebucket bucket);

        /// <summary>
        /// Promote release between buckets
        /// </summary>
        /// <remarks>
        /// Promotes a release from one bucket to another.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="bucket">PromoteBucket</param>
        /// <returns>Task of ApiResponse (Release)</returns>
        System.Threading.Tasks.Task<ApiResponse<Release>> PromoteBucketAsyncWithHttpInfo (string bucketid, Promotebucket bucket);
        /// <summary>
        /// Update a bucket
        /// </summary>
        /// <remarks>
        /// Updates the bucket details by ID.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="bucket">Bucket</param>
        /// <returns>Task of Bucket</returns>
        System.Threading.Tasks.Task<Bucket> UpdateBucketAsync (string bucketid, BucketUpdate bucket);

        /// <summary>
        /// Update a bucket
        /// </summary>
        /// <remarks>
        /// Updates the bucket details by ID.
        /// </remarks>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="bucket">Bucket</param>
        /// <returns>Task of ApiResponse (Bucket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Bucket>> UpdateBucketAsyncWithHttpInfo (string bucketid, BucketUpdate bucket);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BucketsApi : IBucketsApi
    {
        private CloudContentDeliveryManagment.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BucketsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BucketsApi(String basePath)
        {
            this.Configuration = new CloudContentDeliveryManagment.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CloudContentDeliveryManagment.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BucketsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BucketsApi(CloudContentDeliveryManagment.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CloudContentDeliveryManagment.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CloudContentDeliveryManagment.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CloudContentDeliveryManagment.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CloudContentDeliveryManagment.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create bucket Create a bucket for a project.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectguid">Project GUID</param>
        /// <param name="bucket">Bucket</param>
        /// <returns>Bucket</returns>
        public Bucket CreateBucketByProject (string projectguid, BucketCreate bucket)
        {
             ApiResponse<Bucket> localVarResponse = CreateBucketByProjectWithHttpInfo(projectguid, bucket);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create bucket Create a bucket for a project.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectguid">Project GUID</param>
        /// <param name="bucket">Bucket</param>
        /// <returns>ApiResponse of Bucket</returns>
        public ApiResponse< Bucket > CreateBucketByProjectWithHttpInfo (string projectguid, BucketCreate bucket)
        {
            // verify the required parameter 'projectguid' is set
            if (projectguid == null)
                throw new ApiException(400, "Missing required parameter 'projectguid' when calling BucketsApi->CreateBucketByProject");
            // verify the required parameter 'bucket' is set
            if (bucket == null)
                throw new ApiException(400, "Missing required parameter 'bucket' when calling BucketsApi->CreateBucketByProject");

            var localVarPath = "/projects/{projectguid}/buckets/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectguid != null) localVarPathParams.Add("projectguid", this.Configuration.ApiClient.ParameterToString(projectguid)); // path parameter
            if (bucket != null && bucket.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bucket); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bucket; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBucketByProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Bucket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Bucket) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Bucket)));
        }

        /// <summary>
        /// Create bucket Create a bucket for a project.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectguid">Project GUID</param>
        /// <param name="bucket">Bucket</param>
        /// <returns>Task of Bucket</returns>
        public async System.Threading.Tasks.Task<Bucket> CreateBucketByProjectAsync (string projectguid, BucketCreate bucket)
        {
             ApiResponse<Bucket> localVarResponse = await CreateBucketByProjectAsyncWithHttpInfo(projectguid, bucket);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create bucket Create a bucket for a project.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectguid">Project GUID</param>
        /// <param name="bucket">Bucket</param>
        /// <returns>Task of ApiResponse (Bucket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Bucket>> CreateBucketByProjectAsyncWithHttpInfo (string projectguid, BucketCreate bucket)
        {
            // verify the required parameter 'projectguid' is set
            if (projectguid == null)
                throw new ApiException(400, "Missing required parameter 'projectguid' when calling BucketsApi->CreateBucketByProject");
            // verify the required parameter 'bucket' is set
            if (bucket == null)
                throw new ApiException(400, "Missing required parameter 'bucket' when calling BucketsApi->CreateBucketByProject");

            var localVarPath = "/projects/{projectguid}/buckets/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectguid != null) localVarPathParams.Add("projectguid", this.Configuration.ApiClient.ParameterToString(projectguid)); // path parameter
            if (bucket != null && bucket.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bucket); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bucket; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBucketByProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Bucket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Bucket) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Bucket)));
        }

        /// <summary>
        /// Delete a bucket Removes a bucket by ID.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>Nocontent</returns>
        public Nocontent DeleteBucket (string bucketid)
        {
             ApiResponse<Nocontent> localVarResponse = DeleteBucketWithHttpInfo(bucketid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a bucket Removes a bucket by ID.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>ApiResponse of Nocontent</returns>
        public ApiResponse< Nocontent > DeleteBucketWithHttpInfo (string bucketid)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BucketsApi->DeleteBucket");

            var localVarPath = "/buckets/{bucketid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBucket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Nocontent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Nocontent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Nocontent)));
        }

        /// <summary>
        /// Delete a bucket Removes a bucket by ID.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>Task of Nocontent</returns>
        public async System.Threading.Tasks.Task<Nocontent> DeleteBucketAsync (string bucketid)
        {
             ApiResponse<Nocontent> localVarResponse = await DeleteBucketAsyncWithHttpInfo(bucketid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a bucket Removes a bucket by ID.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>Task of ApiResponse (Nocontent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Nocontent>> DeleteBucketAsyncWithHttpInfo (string bucketid)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BucketsApi->DeleteBucket");

            var localVarPath = "/buckets/{bucketid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBucket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Nocontent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Nocontent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Nocontent)));
        }

        /// <summary>
        /// Get a bucket Gets the bucket details by ID.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>Bucket</returns>
        public Bucket GetBucket (string bucketid)
        {
             ApiResponse<Bucket> localVarResponse = GetBucketWithHttpInfo(bucketid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a bucket Gets the bucket details by ID.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>ApiResponse of Bucket</returns>
        public ApiResponse< Bucket > GetBucketWithHttpInfo (string bucketid)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BucketsApi->GetBucket");

            var localVarPath = "/buckets/{bucketid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBucket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Bucket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Bucket) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Bucket)));
        }

        /// <summary>
        /// Get a bucket Gets the bucket details by ID.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>Task of Bucket</returns>
        public async System.Threading.Tasks.Task<Bucket> GetBucketAsync (string bucketid)
        {
             ApiResponse<Bucket> localVarResponse = await GetBucketAsyncWithHttpInfo(bucketid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a bucket Gets the bucket details by ID.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>Task of ApiResponse (Bucket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Bucket>> GetBucketAsyncWithHttpInfo (string bucketid)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BucketsApi->GetBucket");

            var localVarPath = "/buckets/{bucketid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBucket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Bucket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Bucket) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Bucket)));
        }

        /// <summary>
        /// Get counts of changes since last release Gets change count since the last release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>Changecount</returns>
        public Changecount GetDiff (string bucketid)
        {
             ApiResponse<Changecount> localVarResponse = GetDiffWithHttpInfo(bucketid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get counts of changes since last release Gets change count since the last release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>ApiResponse of Changecount</returns>
        public ApiResponse< Changecount > GetDiffWithHttpInfo (string bucketid)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BucketsApi->GetDiff");

            var localVarPath = "/buckets/{bucketid}/diff/unreleased/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Changecount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Changecount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Changecount)));
        }

        /// <summary>
        /// Get counts of changes since last release Gets change count since the last release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>Task of Changecount</returns>
        public async System.Threading.Tasks.Task<Changecount> GetDiffAsync (string bucketid)
        {
             ApiResponse<Changecount> localVarResponse = await GetDiffAsyncWithHttpInfo(bucketid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get counts of changes since last release Gets change count since the last release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <returns>Task of ApiResponse (Changecount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Changecount>> GetDiffAsyncWithHttpInfo (string bucketid)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BucketsApi->GetDiff");

            var localVarPath = "/buckets/{bucketid}/diff/unreleased/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDiff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Changecount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Changecount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Changecount)));
        }

        /// <summary>
        /// Get changed entries since last releases Gets changed entries since the last release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <param name="path">Path (optional)</param>
        /// <param name="includeStates">Include change states, one or more can be specified. The default is all states. (optional)</param>
        /// <returns>List&lt;Releaseentry&gt;</returns>
        public List<Releaseentry> GetDiffEntries (string bucketid, int? page = null, int? perPage = null, string path = null, List<string> includeStates = null)
        {
             ApiResponse<List<Releaseentry>> localVarResponse = GetDiffEntriesWithHttpInfo(bucketid, page, perPage, path, includeStates);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get changed entries since last releases Gets changed entries since the last release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <param name="path">Path (optional)</param>
        /// <param name="includeStates">Include change states, one or more can be specified. The default is all states. (optional)</param>
        /// <returns>ApiResponse of List&lt;Releaseentry&gt;</returns>
        public ApiResponse< List<Releaseentry> > GetDiffEntriesWithHttpInfo (string bucketid, int? page = null, int? perPage = null, string path = null, List<string> includeStates = null)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BucketsApi->GetDiffEntries");

            var localVarPath = "/buckets/{bucketid}/diff/unreleased/entries/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (includeStates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "include_states", includeStates)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDiffEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Releaseentry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Releaseentry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Releaseentry>)));
        }

        /// <summary>
        /// Get changed entries since last releases Gets changed entries since the last release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <param name="path">Path (optional)</param>
        /// <param name="includeStates">Include change states, one or more can be specified. The default is all states. (optional)</param>
        /// <returns>Task of List&lt;Releaseentry&gt;</returns>
        public async System.Threading.Tasks.Task<List<Releaseentry>> GetDiffEntriesAsync (string bucketid, int? page = null, int? perPage = null, string path = null, List<string> includeStates = null)
        {
             ApiResponse<List<Releaseentry>> localVarResponse = await GetDiffEntriesAsyncWithHttpInfo(bucketid, page, perPage, path, includeStates);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get changed entries since last releases Gets changed entries since the last release.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <param name="path">Path (optional)</param>
        /// <param name="includeStates">Include change states, one or more can be specified. The default is all states. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Releaseentry&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Releaseentry>>> GetDiffEntriesAsyncWithHttpInfo (string bucketid, int? page = null, int? perPage = null, string path = null, List<string> includeStates = null)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BucketsApi->GetDiffEntries");

            var localVarPath = "/buckets/{bucketid}/diff/unreleased/entries/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (includeStates != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "include_states", includeStates)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDiffEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Releaseentry>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Releaseentry>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Releaseentry>)));
        }

        /// <summary>
        /// Get buckets for project Gets all buckets for a project.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectguid">Project GUID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>List&lt;Bucket&gt;</returns>
        public List<Bucket> ListBucketsByProject (string projectguid, int? page = null, int? perPage = null)
        {
             ApiResponse<List<Bucket>> localVarResponse = ListBucketsByProjectWithHttpInfo(projectguid, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get buckets for project Gets all buckets for a project.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectguid">Project GUID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>ApiResponse of List&lt;Bucket&gt;</returns>
        public ApiResponse< List<Bucket> > ListBucketsByProjectWithHttpInfo (string projectguid, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'projectguid' is set
            if (projectguid == null)
                throw new ApiException(400, "Missing required parameter 'projectguid' when calling BucketsApi->ListBucketsByProject");

            var localVarPath = "/projects/{projectguid}/buckets/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectguid != null) localVarPathParams.Add("projectguid", this.Configuration.ApiClient.ParameterToString(projectguid)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBucketsByProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Bucket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Bucket>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Bucket>)));
        }

        /// <summary>
        /// Get buckets for project Gets all buckets for a project.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectguid">Project GUID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of List&lt;Bucket&gt;</returns>
        public async System.Threading.Tasks.Task<List<Bucket>> ListBucketsByProjectAsync (string projectguid, int? page = null, int? perPage = null)
        {
             ApiResponse<List<Bucket>> localVarResponse = await ListBucketsByProjectAsyncWithHttpInfo(projectguid, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get buckets for project Gets all buckets for a project.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectguid">Project GUID</param>
        /// <param name="page">Current Page (optional)</param>
        /// <param name="perPage">Items Per Page (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (List&lt;Bucket&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Bucket>>> ListBucketsByProjectAsyncWithHttpInfo (string projectguid, int? page = null, int? perPage = null)
        {
            // verify the required parameter 'projectguid' is set
            if (projectguid == null)
                throw new ApiException(400, "Missing required parameter 'projectguid' when calling BucketsApi->ListBucketsByProject");

            var localVarPath = "/projects/{projectguid}/buckets/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectguid != null) localVarPathParams.Add("projectguid", this.Configuration.ApiClient.ParameterToString(projectguid)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per_page", perPage)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListBucketsByProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Bucket>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Bucket>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Bucket>)));
        }

        /// <summary>
        /// Promote release between buckets Promotes a release from one bucket to another.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="bucket">PromoteBucket</param>
        /// <returns>Release</returns>
        public Release PromoteBucket (string bucketid, Promotebucket bucket)
        {
             ApiResponse<Release> localVarResponse = PromoteBucketWithHttpInfo(bucketid, bucket);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Promote release between buckets Promotes a release from one bucket to another.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="bucket">PromoteBucket</param>
        /// <returns>ApiResponse of Release</returns>
        public ApiResponse< Release > PromoteBucketWithHttpInfo (string bucketid, Promotebucket bucket)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BucketsApi->PromoteBucket");
            // verify the required parameter 'bucket' is set
            if (bucket == null)
                throw new ApiException(400, "Missing required parameter 'bucket' when calling BucketsApi->PromoteBucket");

            var localVarPath = "/buckets/{bucketid}/promote/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (bucket != null && bucket.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bucket); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bucket; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PromoteBucket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Release>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Release) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Release)));
        }

        /// <summary>
        /// Promote release between buckets Promotes a release from one bucket to another.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="bucket">PromoteBucket</param>
        /// <returns>Task of Release</returns>
        public async System.Threading.Tasks.Task<Release> PromoteBucketAsync (string bucketid, Promotebucket bucket)
        {
             ApiResponse<Release> localVarResponse = await PromoteBucketAsyncWithHttpInfo(bucketid, bucket);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Promote release between buckets Promotes a release from one bucket to another.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="bucket">PromoteBucket</param>
        /// <returns>Task of ApiResponse (Release)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Release>> PromoteBucketAsyncWithHttpInfo (string bucketid, Promotebucket bucket)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BucketsApi->PromoteBucket");
            // verify the required parameter 'bucket' is set
            if (bucket == null)
                throw new ApiException(400, "Missing required parameter 'bucket' when calling BucketsApi->PromoteBucket");

            var localVarPath = "/buckets/{bucketid}/promote/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (bucket != null && bucket.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bucket); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bucket; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PromoteBucket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Release>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Release) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Release)));
        }

        /// <summary>
        /// Update a bucket Updates the bucket details by ID.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="bucket">Bucket</param>
        /// <returns>Bucket</returns>
        public Bucket UpdateBucket (string bucketid, BucketUpdate bucket)
        {
             ApiResponse<Bucket> localVarResponse = UpdateBucketWithHttpInfo(bucketid, bucket);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a bucket Updates the bucket details by ID.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="bucket">Bucket</param>
        /// <returns>ApiResponse of Bucket</returns>
        public ApiResponse< Bucket > UpdateBucketWithHttpInfo (string bucketid, BucketUpdate bucket)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BucketsApi->UpdateBucket");
            // verify the required parameter 'bucket' is set
            if (bucket == null)
                throw new ApiException(400, "Missing required parameter 'bucket' when calling BucketsApi->UpdateBucket");

            var localVarPath = "/buckets/{bucketid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (bucket != null && bucket.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bucket); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bucket; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBucket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Bucket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Bucket) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Bucket)));
        }

        /// <summary>
        /// Update a bucket Updates the bucket details by ID.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="bucket">Bucket</param>
        /// <returns>Task of Bucket</returns>
        public async System.Threading.Tasks.Task<Bucket> UpdateBucketAsync (string bucketid, BucketUpdate bucket)
        {
             ApiResponse<Bucket> localVarResponse = await UpdateBucketAsyncWithHttpInfo(bucketid, bucket);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a bucket Updates the bucket details by ID.
        /// </summary>
        /// <exception cref="CloudContentDeliveryManagment.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketid">Bucket ID</param>
        /// <param name="bucket">Bucket</param>
        /// <returns>Task of ApiResponse (Bucket)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Bucket>> UpdateBucketAsyncWithHttpInfo (string bucketid, BucketUpdate bucket)
        {
            // verify the required parameter 'bucketid' is set
            if (bucketid == null)
                throw new ApiException(400, "Missing required parameter 'bucketid' when calling BucketsApi->UpdateBucket");
            // verify the required parameter 'bucket' is set
            if (bucket == null)
                throw new ApiException(400, "Missing required parameter 'bucket' when calling BucketsApi->UpdateBucket");

            var localVarPath = "/buckets/{bucketid}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketid != null) localVarPathParams.Add("bucketid", this.Configuration.ApiClient.ParameterToString(bucketid)); // path parameter
            if (bucket != null && bucket.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bucket); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bucket; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBucket", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Bucket>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Bucket) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Bucket)));
        }

    }
}
