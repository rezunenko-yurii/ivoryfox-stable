/* 
 * Content Delivery Management API
 *
 * <p>Cloud Content Delivery is a managed cloud service that hosts and delivers content to end users worldwide.</p> <p>You are currently viewing the documentation for the <b>Management API</b>, intended to be used by developers at build time for managing content. Refer to the <a href=\"https://content-api.cloud.unity3d.com/doc_client/\">Content Delivery Client API</a> for documentation about the API intended to be used at runtime by your game client.</p> <h2>Client SDK</h2> <p>The Content Delivery Management API is based on Swagger. The <a href=\"https://swagger.io/tools/swagger-codegen/\">Swagger Code Generator</a> can generate client libraries to integrate with your projects.</p> <p>A <a href=\"https://content-api.cloud.unity3d.com/doc/doc.json\">JSON schema</a> is required to generate a client for this API version.</p> <h2>Authentication</h2> <p>The Content Delivery Management API requires an API key associated with your Unity developer account. To access your API Key, please visit the <a href=\"https://developer.cloud.unity3d.com\">developer dashboard</a>.</p> <p>To authenticate requests, include a Basic Authentication header as a base64-encoded string 'username:password', using your API key as the password (and empty username).</p> <p>For example, an API key value of 'd6d2c026bac44b1ea7ac0332694a830e' would include an Authorization header like:</p> <p><b>Authorization: Basic OmQ2ZDJjMDI2YmFjNDRiMWVhN2FjMDMzMjY5NGE4MzBl</b></p> <h2>Pagination</h2> <p>Paged results take two parameters: the number of results to return per page (?per_page) and the page number based on that per page amount (?page). Page numbering starts with 1 and the default page size is 10.</p> <p>For instance, if there are 40 results and you specify page=2&per_page=10, you will receive records 11-20. Paged results will also return a Content-Range header. In the example above the content range header will look like this:</p> <p><b>Content-Range: items 11-20/40</b></p>
 *
 * OpenAPI spec version: 0.9.112
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CloudContentDeliveryManagment.Client.SwaggerDateConverter;

namespace CloudContentDeliveryManagment.Model
{
    /// <summary>
    /// Changecount
    /// </summary>
    [DataContract, Serializable]
    public partial class Changecount :  IEquatable<Changecount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Changecount" /> class.
        /// </summary>
        /// <param name="add">add.</param>
        /// <param name="delete">delete.</param>
        /// <param name="lastModified">lastModified.</param>
        /// <param name="lastModifiedBy">lastModifiedBy.</param>
        /// <param name="lastModifiedByName">lastModifiedByName.</param>
        /// <param name="loading">loading.</param>
        /// <param name="unchanged">unchanged.</param>
        /// <param name="update">update.</param>
        public Changecount(int? add = default(int?), int? delete = default(int?), DateTime? lastModified = default(DateTime?), string lastModifiedBy = default(string), string lastModifiedByName = default(string), bool? loading = default(bool?), int? unchanged = default(int?), int? update = default(int?))
        {
            this.Add = add;
            this.Delete = delete;
            this.LastModified = lastModified;
            this.LastModifiedBy = lastModifiedBy;
            this.LastModifiedByName = lastModifiedByName;
            this.Loading = loading;
            this.Unchanged = unchanged;
            this.Update = update;
        }
        
        /// <summary>
        /// Gets or Sets Add
        /// </summary>
        [DataMember(Name="add", EmitDefaultValue=false)]
        public int? Add { get; set; }

        /// <summary>
        /// Gets or Sets Delete
        /// </summary>
        [DataMember(Name="delete", EmitDefaultValue=false)]
        public int? Delete { get; set; }

        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        [DataMember(Name="last_modified", EmitDefaultValue=false)]
        public DateTime? LastModified { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedBy
        /// </summary>
        [DataMember(Name="last_modified_by", EmitDefaultValue=false)]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedByName
        /// </summary>
        [DataMember(Name="last_modified_by_name", EmitDefaultValue=false)]
        public string LastModifiedByName { get; set; }

        /// <summary>
        /// Gets or Sets Loading
        /// </summary>
        [DataMember(Name="loading", EmitDefaultValue=false)]
        public bool? Loading { get; set; }

        /// <summary>
        /// Gets or Sets Unchanged
        /// </summary>
        [DataMember(Name="unchanged", EmitDefaultValue=false)]
        public int? Unchanged { get; set; }

        /// <summary>
        /// Gets or Sets Update
        /// </summary>
        [DataMember(Name="update", EmitDefaultValue=false)]
        public int? Update { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Changecount {\n");
            sb.Append("  Add: ").Append(Add).Append("\n");
            sb.Append("  Delete: ").Append(Delete).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedBy: ").Append(LastModifiedBy).Append("\n");
            sb.Append("  LastModifiedByName: ").Append(LastModifiedByName).Append("\n");
            sb.Append("  Loading: ").Append(Loading).Append("\n");
            sb.Append("  Unchanged: ").Append(Unchanged).Append("\n");
            sb.Append("  Update: ").Append(Update).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Changecount);
        }

        /// <summary>
        /// Returns true if Changecount instances are equal
        /// </summary>
        /// <param name="input">Instance of Changecount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Changecount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Add == input.Add ||
                    (this.Add != null &&
                    this.Add.Equals(input.Add))
                ) && 
                (
                    this.Delete == input.Delete ||
                    (this.Delete != null &&
                    this.Delete.Equals(input.Delete))
                ) && 
                (
                    this.LastModified == input.LastModified ||
                    (this.LastModified != null &&
                    this.LastModified.Equals(input.LastModified))
                ) && 
                (
                    this.LastModifiedBy == input.LastModifiedBy ||
                    (this.LastModifiedBy != null &&
                    this.LastModifiedBy.Equals(input.LastModifiedBy))
                ) && 
                (
                    this.LastModifiedByName == input.LastModifiedByName ||
                    (this.LastModifiedByName != null &&
                    this.LastModifiedByName.Equals(input.LastModifiedByName))
                ) && 
                (
                    this.Loading == input.Loading ||
                    (this.Loading != null &&
                    this.Loading.Equals(input.Loading))
                ) && 
                (
                    this.Unchanged == input.Unchanged ||
                    (this.Unchanged != null &&
                    this.Unchanged.Equals(input.Unchanged))
                ) && 
                (
                    this.Update == input.Update ||
                    (this.Update != null &&
                    this.Update.Equals(input.Update))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Add != null)
                    hashCode = hashCode * 59 + this.Add.GetHashCode();
                if (this.Delete != null)
                    hashCode = hashCode * 59 + this.Delete.GetHashCode();
                if (this.LastModified != null)
                    hashCode = hashCode * 59 + this.LastModified.GetHashCode();
                if (this.LastModifiedBy != null)
                    hashCode = hashCode * 59 + this.LastModifiedBy.GetHashCode();
                if (this.LastModifiedByName != null)
                    hashCode = hashCode * 59 + this.LastModifiedByName.GetHashCode();
                if (this.Loading != null)
                    hashCode = hashCode * 59 + this.Loading.GetHashCode();
                if (this.Unchanged != null)
                    hashCode = hashCode * 59 + this.Unchanged.GetHashCode();
                if (this.Update != null)
                    hashCode = hashCode * 59 + this.Update.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Add (int?) minimum
            if(this.Add < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Add, must be a value greater than or equal to 0.", new [] { "Add" });
            }

            // Delete (int?) minimum
            if(this.Delete < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Delete, must be a value greater than or equal to 0.", new [] { "Delete" });
            }

            // Unchanged (int?) minimum
            if(this.Unchanged < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Unchanged, must be a value greater than or equal to 0.", new [] { "Unchanged" });
            }

            // Update (int?) minimum
            if(this.Update < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Update, must be a value greater than or equal to 0.", new [] { "Update" });
            }

            yield break;
        }
    }

}
